import { app, BrowserWindow, ipcMain } from "electron";
// import fetch from "node-fetch";
// (global as any).fetch = fetch;
import { fileURLToPath } from "url";
import * as fs from "fs/promises";
import { Blob } from "buffer";
// import fileUrl from "file-url";
import "@loaders.gl/polyfills";
import { GLTFLoader } from "@loaders.gl/gltf";
import { load } from "@loaders.gl/core";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

async function fetchFile(url: any) {
  if (url.protocol === "file:") {
    try {
      const filePath = fileURLToPath(url);
      const data = await fs.readFile(filePath);
      return new Response(data, { status: 200 });
    } catch (error) {
      return new Response(null, { status: 404 });
    }
  } else {
    // Handle other URL protocols (e.g., http or https)
    const response = await fetch(url);
    return response;
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      webSecurity: false,
      contextIsolation: false,
      nodeIntegration: true,
      nodeIntegrationInWorker: true,
      // preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setMenuBarVisibility(false);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.handle("load_gltf", async (event, filePath) => {
    console.log("Loading GLTF file:", filePath);
    try {
      const fileData = await fs.readFile(filePath);
      // console.log(fileData);
      const arrayBuffer = new Uint8Array(fileData).buffer;
      const baseUri = path.dirname(filePath);
      const gltf = await load(arrayBuffer, GLTFLoader, { baseUri });
      console.log("GLTF file loaded:");
      // console.log(gltf);
      // const gltfData = {
      //   json: gltf.json,
      //   buffers: gltf.buffers.map((buffer: any) =>
      //     Array.from(new Uint8Array(buffer))
      //   ),
      // };
      return JSON.stringify(gltf);
    } catch (error) {
      console.error("Error loading GLTF file:", error);
      return null;
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
